(* module LA = struct
    let matrix_mult x y = 
    (* Check failure modes m x n matrices *)
end *)

(*Map and Map2 without result types*)
let rec easymap op = function
    | [] -> []
    | h :: t -> op h :: easymap op t

let rec easymap2 op a b =
    match a, b with
        | [], _ -> b
        | _, [] -> a
        | h :: t, h' :: t' -> (op h h') :: (easymap2 op t t')

(*Vector sum*)
(* let vector_sum x y = 
    List.map2 ( +. ) x y *)

(* Vector sum with easymap2 *)
let vector_sum x y =
    easymap2 ( +. ) x y

let add_bias x y =
    match x with
        | None -> None
        | Some c -> Some (easymap2 ( +. ) c y)

(*matrix multiplication - Transpose then product*)


(*Try just considering matrix x vector case for simpler implementation*)
(*Matrix by vector is dot product each of the matrix rows with the vector to get a new vector*)
(* type 'a vector = 'a list;; *)
(* 
let dot_product (vector1 : vector) (vector2 : vector) = 
    List.map ( +. ) (List.map2 ( *. ) vector1 vector2 ) *)

let rec sum = function
    | [] -> 0.
    | h :: t -> h +. sum t

let dot_prod vector1 vector2 = 
    sum (easymap2 ( *. ) vector1 vector2)

let rec weights_inputs_mult matrix vector = 
    match matrix, vector with
        | None, _  -> []
        | _, None -> []
        | _, Some [] -> []
        | Some [], _ -> []
        | Some (h :: t), Some v -> (dot_prod h v) :: (weights_inputs_mult (Some t) (Some v))


(* get nth element of a list *)
(* compare element n *)
let extract x = match x with
    | Some c -> c
    | None -> 0.

(*one comparison for each of <, >, = *)
(*takes list options *)
let gt_in_n n v1 v2 = 
    match v1, v2 with
    | _, None -> false
    | None, _ -> false
    | Some v1', Some v2' -> 
        let v1'' = List.nth n v1' in
        let v2'' = List.nth n v2' in
        match v1'', v2'' with
        | _, None -> false
        | None, _ -> false
        | Some a, Some b -> a >. b

let gte_in_n n v1 v2 = 
match v1, v2 with
| _, None -> false
| None, _ -> false
| Some v1', Some v2' -> 
    let v1'' = List.nth n v1' in
    let v2'' = List.nth n v2' in
    match v1'', v2'' with
    | _, None -> false
    | None, _ -> false
    | Some a, Some b -> a >=. b


let lt_in_n n v1 v2 = 
    let v1' = List.nth n v1 in
    let v2' = List.nth n v2 in 
    match v1', v2' with
    | _, None -> false
    | None, _ -> false
    | Some a, Some b -> a < b

let eq_in_n n v1 v2 = 
    let v1' = List.nth n v1 in
    let v2' = List.nth n v2 in
    match v1', v2' with
        | _, None -> false
        | None, _ -> false
        | Some a, Some b -> a = b

let rec lookup k = function
| [] -> None
| (k', v) :: t -> if k = k' then Some v else lookup k t

(* let weights = [(0, [[1.; 2.];[3.; 4.]]);(1, [[-3.; 7.];[0.; 8.];[-12.; 0.]]);(2, [[1.; 1.; 1.]])]
let bias = [(0, [1.;2.]);(1, [-1.;6.;3.]);(2, [1.])]
let activations = [(0, "relu");(1, "relu");(2, "linear")]
let layers = [0;1;2]
let sample = Some [5.; 3.] *)

(* let weights = [(0, [[1.]])]
let bias = [(0, [0.])]
let activations = [(0, "relu")]
let layers = [0]
let sample = Some [0.5] *)

(* let weights = [(0, [[-1.]])]
let bias = [(0, [1.])]
let activations = [(0, "relu")]
let layers = [0]
let sample = Some [0.5] *)

(* let weights = [(0, [[1.;-0.1]])]
let bias = [(0, [0.])]
let activations = [(0, "relu")]
let layers = [0]
let sample = Some [0.5] *)

(* let weights = [(0, [[1.; 3.];[5.; 7.]]);(1, [[2.; 4.];[6.; 8.]])]
let bias = [(0, [2.;4.]);(1, [1.;3.])]
let activations = [(0, "relu");(1, "relu")]
let layers = [0;1]
let sample = Some [5.; 3.] *)

(* let weights = [(0, [[1.; 3.; 5.];[2.; 4.; 6.];[5.;3.;1.];[6.;4.;2.]])]
let bias = [(0, [2.;2.;2.;2.])]
let activations = [(0, "relu")]
let layers = [0]
let sample = Some [5.; 3.; 1.] *)

(* let weights = [(0, [[1.; 3.; 5.];[2.; 4.; 6.];[5.;3.;1.];[6.;4.;2.]]);(1, [[1.;1.;1.;1.]])]
let bias = [(0, [2.;2.;2.;2.]); (1, [1.])]
let activations = [(0, "relu"); (1, "relu")]
let layers = [0;1]
let sample = Some [5.; 3.; 1.] *)

(* let weights = [(0, [[1.; 3.];[5.; 7.]])]
let bias = [(0, [2.;4.])]
let activations = [(0, "relu")]
let layers = [0]
let sample = Some [5.; 3.] *)

(* ---Equivalence---
networks:
let weights = [(0, [[3.; 5.];[4.; 6.]]); (1, [[1.;2.]])]
let bias = [(0, [0.;0.])]
let activations = [(0, "relu")]
let layers = [0;1]
let sample = Some [5.; 3.]

let weights = [(0, [[11.; 17.]])]
let bias = [(0, [0.])]
let activations = [(0, "relu")]
let layers = [0;1]
let sample = Some [5.; 3.]

need to be able to define 2 models : modelA modelB
need to be able to define equal in all variables

*)


module Activations = struct
    let relu x = if x >. 0.
                then x
                else 0.
    let linear x = x
end

let apply_layer layer input =
    let kernel = (add_bias (lookup layer bias) (weights_inputs_mult(lookup layer weights) input)) in
    if (lookup layer activations) = Some "relu" then
        match kernel with
            | None -> None
            | Some c -> Some (List.map Activations.relu c)
    else
        match kernel with
            | None -> None
            | Some c -> Some (List.map Activations.linear c)

(*iterate through layers list - otherwise can't prove termination?*)
let rec apply_network layers input = 
    match layers with
        | [] -> input
        | h :: t -> apply_layer h input |> apply_network t
(* 
let rec apply_network input layer_counter = 
    if layer_counter = 0
        then apply_layer 0 input
    else 
        apply_layer layer_counter (apply_network input (layer_counter - 1))*)

(*expects Some [x.; y.]*)
let model = apply_network layers 

(* let model input = apply_layer 0 input |> apply_layer 1 *)

(* let monotonicity x y = 
    y >=. x
    ==>
    gte_in_n 0 (model (Some [y])) (model (Some [x])) 

verify monotonicity [@@auto];; *)

let monotonicity x y b =
    y >=. x
    ==> 
    gte_in_n 0 (model (Some [y;b])) (model (Some [x;b]))

verify monotonicity [@@auto];;

(* let monotonicity x y a b = 
    y >=. x
    ==> gte_in_n 0 (model (Some [y;a;b])) (model (Some [x;a;b]))

verify monotonicity [@@auto];; *)

(* let lipschitz_continuity x y =  *)
